### YamlMime:ManagedReference
items:
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension
  commentId: T:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension
  id: BaseCloudStorageExtension
  parent: RocketshiftStudio.Trophy.Extensions
  children:
  - RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync(System.Collections.Generic.IList{System.String})
  - RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.IsAuthorized
  - RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String})
  - RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String},System.String)
  - RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
  langs:
  - csharp
  - vb
  name: BaseCloudStorageExtension
  nameWithType: BaseCloudStorageExtension
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension
  type: Class
  source:
    remote:
      path: Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: BaseCloudStorageExtension
    path: ../../../../../../Unity Projects/Trophy/Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
    startLine: 8
  assemblies:
  - RocketshiftStudio.Trophy
  namespace: RocketshiftStudio.Trophy.Extensions
  summary: To allow cloud storage based save/load operations on score values
  example: []
  syntax:
    content: 'public abstract class BaseCloudStorageExtension : ICloudStorageExtension, IStorageExtension, ISpecialPermissionExtension, IExtension'
    content.vb: Public MustInherit Class BaseCloudStorageExtension Implements ICloudStorageExtension, IStorageExtension, ISpecialPermissionExtension, IExtension
  inheritance:
  - System.Object
  implements:
  - RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
  - RocketshiftStudio.Trophy.Extensions.IStorageExtension
  - RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
  - RocketshiftStudio.Trophy.Extensions.IExtension
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String})
  commentId: M:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String})
  id: LoadAsync(System.Collections.Generic.IList{System.String})
  parent: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension
  langs:
  - csharp
  - vb
  name: LoadAsync(IList<string>)
  nameWithType: BaseCloudStorageExtension.LoadAsync(IList<string>)
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList<string>)
  type: Method
  source:
    remote:
      path: Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: LoadAsync
    path: ../../../../../../Unity Projects/Trophy/Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
    startLine: 10
  assemblies:
  - RocketshiftStudio.Trophy
  namespace: RocketshiftStudio.Trophy.Extensions
  summary: To load and sync score values with saved values
  example: []
  syntax:
    content: public virtual Task<IList<ScoreData>> LoadAsync(IList<string> keys)
    parameters:
    - id: keys
      type: System.Collections.Generic.IList{System.String}
      description: Target keys
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData}}
      description: Score data collection
    content.vb: Public Overridable Function LoadAsync(keys As IList(Of String)) As Task(Of IList(Of ScoreData))
  overload: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync*
  implements:
  - RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String})
  nameWithType.vb: BaseCloudStorageExtension.LoadAsync(IList(Of String))
  fullName.vb: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList(Of String))
  name.vb: LoadAsync(IList(Of String))
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String},System.String)
  commentId: M:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String},System.String)
  id: LoadAsync(System.Collections.Generic.IList{System.String},System.String)
  parent: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension
  langs:
  - csharp
  - vb
  name: LoadAsync(IList<string>, string)
  nameWithType: BaseCloudStorageExtension.LoadAsync(IList<string>, string)
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList<string>, string)
  type: Method
  source:
    remote:
      path: Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: LoadAsync
    path: ../../../../../../Unity Projects/Trophy/Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
    startLine: 15
  assemblies:
  - RocketshiftStudio.Trophy
  namespace: RocketshiftStudio.Trophy.Extensions
  summary: To fetch score values of a user with id
  example: []
  syntax:
    content: public abstract Task<IList<ScoreData>> LoadAsync(IList<string> keys, string userId)
    parameters:
    - id: keys
      type: System.Collections.Generic.IList{System.String}
      description: Target keys
    - id: userId
      type: System.String
      description: Id of user
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData}}
      description: Score data collection
    content.vb: Public MustOverride Function LoadAsync(keys As IList(Of String), userId As String) As Task(Of IList(Of ScoreData))
  overload: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync*
  implements:
  - RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String},System.String)
  nameWithType.vb: BaseCloudStorageExtension.LoadAsync(IList(Of String), String)
  fullName.vb: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync(System.Collections.Generic.IList(Of String), String)
  name.vb: LoadAsync(IList(Of String), String)
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
  commentId: M:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
  id: SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
  parent: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension
  langs:
  - csharp
  - vb
  name: SaveAsync(IList<ScoreData>)
  nameWithType: BaseCloudStorageExtension.SaveAsync(IList<ScoreData>)
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync(System.Collections.Generic.IList<RocketshiftStudio.Trophy.ScoreData>)
  type: Method
  source:
    remote:
      path: Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: SaveAsync
    path: ../../../../../../Unity Projects/Trophy/Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
    startLine: 16
  assemblies:
  - RocketshiftStudio.Trophy
  namespace: RocketshiftStudio.Trophy.Extensions
  summary: To save score values to storage
  example: []
  syntax:
    content: public abstract Task SaveAsync(IList<ScoreData> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData}
    return:
      type: System.Threading.Tasks.Task
      description: Asynchronous operation
    content.vb: Public MustOverride Function SaveAsync(data As IList(Of ScoreData)) As Task
  overload: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync*
  implements:
  - RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
  nameWithType.vb: BaseCloudStorageExtension.SaveAsync(IList(Of ScoreData))
  fullName.vb: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync(System.Collections.Generic.IList(Of RocketshiftStudio.Trophy.ScoreData))
  name.vb: SaveAsync(IList(Of ScoreData))
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync(System.Collections.Generic.IList{System.String})
  commentId: M:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync(System.Collections.Generic.IList{System.String})
  id: DeleteAsync(System.Collections.Generic.IList{System.String})
  parent: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension
  langs:
  - csharp
  - vb
  name: DeleteAsync(IList<string>)
  nameWithType: BaseCloudStorageExtension.DeleteAsync(IList<string>)
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync(System.Collections.Generic.IList<string>)
  type: Method
  source:
    remote:
      path: Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: DeleteAsync
    path: ../../../../../../Unity Projects/Trophy/Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
    startLine: 17
  assemblies:
  - RocketshiftStudio.Trophy
  namespace: RocketshiftStudio.Trophy.Extensions
  summary: To delete score values from storage
  example: []
  syntax:
    content: public abstract Task DeleteAsync(IList<string> keys)
    parameters:
    - id: keys
      type: System.Collections.Generic.IList{System.String}
      description: Target keys
    return:
      type: System.Threading.Tasks.Task
      description: Asynchronous operation
    content.vb: Public MustOverride Function DeleteAsync(keys As IList(Of String)) As Task
  overload: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync*
  implements:
  - RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteAsync(System.Collections.Generic.IList{System.String})
  nameWithType.vb: BaseCloudStorageExtension.DeleteAsync(IList(Of String))
  fullName.vb: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync(System.Collections.Generic.IList(Of String))
  name.vb: DeleteAsync(IList(Of String))
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.IsAuthorized
  commentId: M:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.IsAuthorized
  id: IsAuthorized
  parent: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension
  langs:
  - csharp
  - vb
  name: IsAuthorized()
  nameWithType: BaseCloudStorageExtension.IsAuthorized()
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.IsAuthorized()
  type: Method
  source:
    remote:
      path: Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: IsAuthorized
    path: ../../../../../../Unity Projects/Trophy/Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/BaseCloudStorageExtension.cs
    startLine: 19
  assemblies:
  - RocketshiftStudio.Trophy
  namespace: RocketshiftStudio.Trophy.Extensions
  summary: Used by <xref href="RocketshiftStudio.Trophy.Trophy" data-throw-if-not-resolved="false"></xref> to check for database authorization
  example: []
  syntax:
    content: public abstract bool IsAuthorized()
    return:
      type: System.Boolean
      description: Authorization status
    content.vb: Public MustOverride Function IsAuthorized() As Boolean
  overload: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.IsAuthorized*
  implements:
  - RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
references:
- uid: RocketshiftStudio.Trophy.Extensions
  commentId: N:RocketshiftStudio.Trophy.Extensions
  href: RocketshiftStudio.html
  name: RocketshiftStudio.Trophy.Extensions
  nameWithType: RocketshiftStudio.Trophy.Extensions
  fullName: RocketshiftStudio.Trophy.Extensions
  spec.csharp:
  - uid: RocketshiftStudio
    name: RocketshiftStudio
    href: RocketshiftStudio.html
  - name: .
  - uid: RocketshiftStudio.Trophy
    name: Trophy
    href: RocketshiftStudio.Trophy.html
  - name: .
  - uid: RocketshiftStudio.Trophy.Extensions
    name: Extensions
    href: RocketshiftStudio.Trophy.Extensions.html
  spec.vb:
  - uid: RocketshiftStudio
    name: RocketshiftStudio
    href: RocketshiftStudio.html
  - name: .
  - uid: RocketshiftStudio.Trophy
    name: Trophy
    href: RocketshiftStudio.Trophy.html
  - name: .
  - uid: RocketshiftStudio.Trophy.Extensions
    name: Extensions
    href: RocketshiftStudio.Trophy.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
  commentId: T:RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
  parent: RocketshiftStudio.Trophy.Extensions
  href: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html
  name: ICloudStorageExtension
  nameWithType: ICloudStorageExtension
  fullName: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
- uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension
  commentId: T:RocketshiftStudio.Trophy.Extensions.IStorageExtension
  parent: RocketshiftStudio.Trophy.Extensions
  href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html
  name: IStorageExtension
  nameWithType: IStorageExtension
  fullName: RocketshiftStudio.Trophy.Extensions.IStorageExtension
- uid: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
  commentId: T:RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
  parent: RocketshiftStudio.Trophy.Extensions
  href: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html
  name: ISpecialPermissionExtension
  nameWithType: ISpecialPermissionExtension
  fullName: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
- uid: RocketshiftStudio.Trophy.Extensions.IExtension
  commentId: T:RocketshiftStudio.Trophy.Extensions.IExtension
  parent: RocketshiftStudio.Trophy.Extensions
  href: RocketshiftStudio.Trophy.Extensions.IExtension.html
  name: IExtension
  nameWithType: IExtension
  fullName: RocketshiftStudio.Trophy.Extensions.IExtension
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync*
  commentId: Overload:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync
  href: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.html#RocketshiftStudio_Trophy_Extensions_BaseCloudStorageExtension_LoadAsync_System_Collections_Generic_IList_System_String__
  name: LoadAsync
  nameWithType: BaseCloudStorageExtension.LoadAsync
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.LoadAsync
- uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String})
  commentId: M:RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String})
  parent: RocketshiftStudio.Trophy.Extensions.IStorageExtension
  isExternal: true
  href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_LoadAsync_System_Collections_Generic_IList_System_String__
  name: LoadAsync(IList<string>)
  nameWithType: IStorageExtension.LoadAsync(IList<string>)
  fullName: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadAsync(System.Collections.Generic.IList<string>)
  nameWithType.vb: IStorageExtension.LoadAsync(IList(Of String))
  fullName.vb: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadAsync(System.Collections.Generic.IList(Of String))
  name.vb: LoadAsync(IList(Of String))
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String})
    name: LoadAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_LoadAsync_System_Collections_Generic_IList_System_String__
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String})
    name: LoadAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_LoadAsync_System_Collections_Generic_IList_System_String__
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: )
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<string>
  nameWithType: IList<string>
  fullName: System.Collections.Generic.IList<string>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: RocketshiftStudio.Trophy.ScoreData.html
  name: Task<IList<ScoreData>>
  nameWithType: Task<IList<ScoreData>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<RocketshiftStudio.Trophy.ScoreData>>
  nameWithType.vb: Task(Of IList(Of ScoreData))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of RocketshiftStudio.Trophy.ScoreData))
  name.vb: Task(Of IList(Of ScoreData))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: )
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String},System.String)
  commentId: M:RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String},System.String)
  parent: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
  isExternal: true
  href: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html#RocketshiftStudio_Trophy_Extensions_ICloudStorageExtension_LoadAsync_System_Collections_Generic_IList_System_String__System_String_
  name: LoadAsync(IList<string>, string)
  nameWithType: ICloudStorageExtension.LoadAsync(IList<string>, string)
  fullName: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadAsync(System.Collections.Generic.IList<string>, string)
  nameWithType.vb: ICloudStorageExtension.LoadAsync(IList(Of String), String)
  fullName.vb: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadAsync(System.Collections.Generic.IList(Of String), String)
  name.vb: LoadAsync(IList(Of String), String)
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String},System.String)
    name: LoadAsync
    href: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html#RocketshiftStudio_Trophy_Extensions_ICloudStorageExtension_LoadAsync_System_Collections_Generic_IList_System_String__System_String_
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadAsync(System.Collections.Generic.IList{System.String},System.String)
    name: LoadAsync
    href: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html#RocketshiftStudio_Trophy_Extensions_ICloudStorageExtension_LoadAsync_System_Collections_Generic_IList_System_String__System_String_
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync*
  commentId: Overload:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync
  href: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.html#RocketshiftStudio_Trophy_Extensions_BaseCloudStorageExtension_SaveAsync_System_Collections_Generic_IList_RocketshiftStudio_Trophy_ScoreData__
  name: SaveAsync
  nameWithType: BaseCloudStorageExtension.SaveAsync
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.SaveAsync
- uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
  commentId: M:RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
  parent: RocketshiftStudio.Trophy.Extensions.IStorageExtension
  isExternal: true
  href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_SaveAsync_System_Collections_Generic_IList_RocketshiftStudio_Trophy_ScoreData__
  name: SaveAsync(IList<ScoreData>)
  nameWithType: IStorageExtension.SaveAsync(IList<ScoreData>)
  fullName: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveAsync(System.Collections.Generic.IList<RocketshiftStudio.Trophy.ScoreData>)
  nameWithType.vb: IStorageExtension.SaveAsync(IList(Of ScoreData))
  fullName.vb: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveAsync(System.Collections.Generic.IList(Of RocketshiftStudio.Trophy.ScoreData))
  name.vb: SaveAsync(IList(Of ScoreData))
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
    name: SaveAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_SaveAsync_System_Collections_Generic_IList_RocketshiftStudio_Trophy_ScoreData__
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveAsync(System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData})
    name: SaveAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_SaveAsync_System_Collections_Generic_IList_RocketshiftStudio_Trophy_ScoreData__
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: )
  - name: )
- uid: System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData}
  commentId: T:System.Collections.Generic.IList{RocketshiftStudio.Trophy.ScoreData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: RocketshiftStudio.Trophy.ScoreData.html
  name: IList<ScoreData>
  nameWithType: IList<ScoreData>
  fullName: System.Collections.Generic.IList<RocketshiftStudio.Trophy.ScoreData>
  nameWithType.vb: IList(Of ScoreData)
  fullName.vb: System.Collections.Generic.IList(Of RocketshiftStudio.Trophy.ScoreData)
  name.vb: IList(Of ScoreData)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync*
  commentId: Overload:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync
  href: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.html#RocketshiftStudio_Trophy_Extensions_BaseCloudStorageExtension_DeleteAsync_System_Collections_Generic_IList_System_String__
  name: DeleteAsync
  nameWithType: BaseCloudStorageExtension.DeleteAsync
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.DeleteAsync
- uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteAsync(System.Collections.Generic.IList{System.String})
  commentId: M:RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteAsync(System.Collections.Generic.IList{System.String})
  parent: RocketshiftStudio.Trophy.Extensions.IStorageExtension
  isExternal: true
  href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_DeleteAsync_System_Collections_Generic_IList_System_String__
  name: DeleteAsync(IList<string>)
  nameWithType: IStorageExtension.DeleteAsync(IList<string>)
  fullName: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteAsync(System.Collections.Generic.IList<string>)
  nameWithType.vb: IStorageExtension.DeleteAsync(IList(Of String))
  fullName.vb: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteAsync(System.Collections.Generic.IList(Of String))
  name.vb: DeleteAsync(IList(Of String))
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteAsync(System.Collections.Generic.IList{System.String})
    name: DeleteAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_DeleteAsync_System_Collections_Generic_IList_System_String__
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteAsync(System.Collections.Generic.IList{System.String})
    name: DeleteAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_DeleteAsync_System_Collections_Generic_IList_System_String__
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: )
- uid: RocketshiftStudio.Trophy.Trophy
  commentId: T:RocketshiftStudio.Trophy.Trophy
  href: RocketshiftStudio.Trophy.Trophy.html
  name: Trophy
  nameWithType: Trophy
  fullName: RocketshiftStudio.Trophy.Trophy
- uid: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.IsAuthorized*
  commentId: Overload:RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.IsAuthorized
  href: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.html#RocketshiftStudio_Trophy_Extensions_BaseCloudStorageExtension_IsAuthorized
  name: IsAuthorized
  nameWithType: BaseCloudStorageExtension.IsAuthorized
  fullName: RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.IsAuthorized
- uid: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
  commentId: M:RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
  parent: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
  href: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html#RocketshiftStudio_Trophy_Extensions_ISpecialPermissionExtension_IsAuthorized
  name: IsAuthorized()
  nameWithType: ISpecialPermissionExtension.IsAuthorized()
  fullName: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized()
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
    name: IsAuthorized
    href: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html#RocketshiftStudio_Trophy_Extensions_ISpecialPermissionExtension_IsAuthorized
  - name: (
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
    name: IsAuthorized
    href: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html#RocketshiftStudio_Trophy_Extensions_ISpecialPermissionExtension_IsAuthorized
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
