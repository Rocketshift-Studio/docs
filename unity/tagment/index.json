{
  "api/RocketshiftStudio.Shared.Singleton.ScriptableSingleton-1.html": {
    "href": "api/RocketshiftStudio.Shared.Singleton.ScriptableSingleton-1.html",
    "title": "Class ScriptableSingleton<TScriptableObject> | Tagment - Component Tags Documentation",
    "summary": "Class ScriptableSingleton<TScriptableObject> Base class for creating scriptable object as singleton Inheritance object Object ScriptableObject ScriptableSingleton<TScriptableObject> TagmentSettings Namespace: RocketshiftStudio.Shared.Singleton Assembly: RocketshiftStudio.Shared.dll Syntax [ExcludeFromPreset] [ExcludeFromObjectFactory] public abstract class ScriptableSingleton<TScriptableObject> : ScriptableObject where TScriptableObject : ScriptableObject Type Parameters Name Description TScriptableObject The singleton type Properties Instance The singleton instance of this type Declaration public static TScriptableObject Instance { get; } Property Value Type Description TScriptableObject"
  },
  "api/RocketshiftStudio.Shared.Singleton.ScriptableSingletonAttribute.html": {
    "href": "api/RocketshiftStudio.Shared.Singleton.ScriptableSingletonAttribute.html",
    "title": "Class ScriptableSingletonAttribute | Tagment - Component Tags Documentation",
    "summary": "Class ScriptableSingletonAttribute Helper attribute for use of creating singleton scriptable object using ScriptableSingleton<TScriptableObject> Inheritance object Attribute ScriptableSingletonAttribute Namespace: RocketshiftStudio.Shared.Singleton Assembly: RocketshiftStudio.Shared.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class ScriptableSingletonAttribute : Attribute Constructors ScriptableSingletonAttribute(string, string, bool) Declaration public ScriptableSingletonAttribute(string folderPath = null, string fileName = null, bool editorOnly = false) Parameters Type Name Description string folderPath string fileName bool editorOnly Fields editorOnly Declaration public readonly bool editorOnly Field Value Type Description bool fileName Declaration public readonly string fileName Field Value Type Description string folderPath Declaration public readonly string folderPath Field Value Type Description string"
  },
  "api/RocketshiftStudio.Shared.Singleton.SingletonMonoBehaviour-1.html": {
    "href": "api/RocketshiftStudio.Shared.Singleton.SingletonMonoBehaviour-1.html",
    "title": "Class SingletonMonoBehaviour<TMonoBehaviour> | Tagment - Component Tags Documentation",
    "summary": "Class SingletonMonoBehaviour<TMonoBehaviour> Base class for creating mono behaviours as singleton Inheritance object Object Component Behaviour MonoBehaviour SingletonMonoBehaviour<TMonoBehaviour> Trophy Namespace: RocketshiftStudio.Shared.Singleton Assembly: RocketshiftStudio.Shared.dll Syntax [DisallowMultipleComponent] public abstract class SingletonMonoBehaviour<TMonoBehaviour> : MonoBehaviour where TMonoBehaviour : MonoBehaviour Type Parameters Name Description TMonoBehaviour Properties Instance Declaration public static TMonoBehaviour Instance { get; set; } Property Value Type Description TMonoBehaviour Methods Awake() Declaration protected virtual void Awake()"
  },
  "api/RocketshiftStudio.Shared.Singleton.html": {
    "href": "api/RocketshiftStudio.Shared.Singleton.html",
    "title": "Namespace RocketshiftStudio.Shared.Singleton | Tagment - Component Tags Documentation",
    "summary": "Namespace RocketshiftStudio.Shared.Singleton Classes ScriptableSingletonAttribute Helper attribute for use of creating singleton scriptable object using ScriptableSingleton<TScriptableObject> ScriptableSingleton<TScriptableObject> Base class for creating scriptable object as singleton"
  },
  "api/RocketshiftStudio.Tagment.Settings.html": {
    "href": "api/RocketshiftStudio.Tagment.Settings.html",
    "title": "Class Settings | Tagment - Component Tags Documentation",
    "summary": "Class Settings Inheritance object Object ScriptableObject ScriptableSingleton<Settings> Settings Inherited Members ScriptableSingleton<Settings>.Instance Namespace: RocketshiftStudio.Tagment Assembly: RocketshiftStudio.Tagment.dll Syntax [ScriptableSingleton(\"Rocketshift Studio/Utilities/Tagment\", null, false)] public sealed class Settings : ScriptableSingleton<Settings> Properties Tags Declaration public string[] Tags { get; } Property Value Type Description string[]"
  },
  "api/RocketshiftStudio.Tagment.Tagment.html": {
    "href": "api/RocketshiftStudio.Tagment.Tagment.html",
    "title": "Class Tagment | Tagment - Component Tags Documentation",
    "summary": "Class Tagment Inheritance object Tagment Namespace: RocketshiftStudio.Tagment Assembly: RocketshiftStudio.Tagment.dll Syntax public static class Tagment Methods ContainsTag(Component, string) Determines whether the specified component is associated with the given tag. Declaration public static bool ContainsTag(this Component component, string tag) Parameters Type Name Description Component component The component to check for the tag association. Cannot be null string tag The tag to search for. Cannot be null or empty Returns Type Description bool true if the specified tag is associated with the component; otherwise, false ContainsTagsAll(Component, string[]) Determines whether the specified component is associated with all of the given tags. Declaration public static bool ContainsTagsAll(this Component component, string[] tags) Parameters Type Name Description Component component The component to check for tag associations. string[] tags The array of tags to check against. Returns Type Description bool true if the component is associated with all of the specified tags; otherwise, false. ContainsTagsAny(Component, string[]) Determines whether the specified component is associated with any of the given tags. Declaration public static bool ContainsTagsAny(this Component component, string[] tags) Parameters Type Name Description Component component The component to check for tag associations. string[] tags The array of tags to check against. Returns Type Description bool true if the component is associated with any of the specified tags; otherwise, false. GetComponentWithTag<TComponent>(string) Retrieves the first component of the specified type associated with the given tag across all registered GameObjects. Declaration public static TComponent GetComponentWithTag<TComponent>(string tag) where TComponent : Component Parameters Type Name Description string tag The tag to match. Returns Type Description TComponent The first matching component found, or null if none found. Type Parameters Name Description TComponent The component type to look for. GetComponentWithTag<TComponent>(Component, string) Retrieves the first component of the specified type associated with the given tag from the GameObject of the current component. Declaration public static TComponent GetComponentWithTag<TComponent>(this Component component, string tag) where TComponent : Component Parameters Type Name Description Component component string tag Returns Type Description TComponent Type Parameters Name Description TComponent GetComponentWithTag<TComponent>(GameObject, string) Retrieves the first component of the specified type associated with the given tag on the given GameObject. Declaration public static TComponent GetComponentWithTag<TComponent>(this GameObject gameObject, string tag) where TComponent : Component Parameters Type Name Description GameObject gameObject string tag Returns Type Description TComponent Type Parameters Name Description TComponent GetComponentsWithTag<TComponent>(string) Retrieves all components of the specified type associated with the given tag across all GameObjects. Declaration public static TComponent[] GetComponentsWithTag<TComponent>(string tag) where TComponent : Component Parameters Type Name Description string tag Returns Type Description TComponent[] Type Parameters Name Description TComponent GetComponentsWithTag<TComponent>(Component, string) Retrieves all components of the specified type associated with the given tag from the current component's GameObject. Declaration public static TComponent[] GetComponentsWithTag<TComponent>(this Component component, string tag) where TComponent : Component Parameters Type Name Description Component component string tag Returns Type Description TComponent[] Type Parameters Name Description TComponent GetComponentsWithTag<TComponent>(GameObject, string) Retrieves all components of the specified type associated with the given tag from the specified GameObject. Declaration public static TComponent[] GetComponentsWithTag<TComponent>(this GameObject gameObject, string tag) where TComponent : Component Parameters Type Name Description GameObject gameObject string tag Returns Type Description TComponent[] Type Parameters Name Description TComponent GetComponentsWithTagsAll<TComponent>(params string[]) Retrieves all components of the specified type associated with all of the given tags across all GameObjects. Declaration public static TComponent[] GetComponentsWithTagsAll<TComponent>(params string[] tags) where TComponent : Component Parameters Type Name Description string[] tags Returns Type Description TComponent[] Type Parameters Name Description TComponent GetComponentsWithTagsAll<TComponent>(Component, params string[]) Retrieves all components of the specified type associated with all of the given tags from the current component's GameObject. Declaration public static TComponent[] GetComponentsWithTagsAll<TComponent>(this Component component, params string[] tags) where TComponent : Component Parameters Type Name Description Component component string[] tags Returns Type Description TComponent[] Type Parameters Name Description TComponent GetComponentsWithTagsAll<TComponent>(GameObject, params string[]) Retrieves all components of the specified type associated with all of the given tags from the specified GameObject. Declaration public static TComponent[] GetComponentsWithTagsAll<TComponent>(this GameObject gameObject, params string[] tags) where TComponent : Component Parameters Type Name Description GameObject gameObject string[] tags Returns Type Description TComponent[] Type Parameters Name Description TComponent GetComponentsWithTagsAny<TComponent>(params string[]) Retrieves all components of the specified type associated with any of the given tags across all GameObjects. Declaration public static TComponent[] GetComponentsWithTagsAny<TComponent>(params string[] tags) where TComponent : Component Parameters Type Name Description string[] tags Returns Type Description TComponent[] Type Parameters Name Description TComponent GetComponentsWithTagsAny<TComponent>(Component, params string[]) Retrieves all components of the specified type associated with any of the given tags from the current component's GameObject. Declaration public static TComponent[] GetComponentsWithTagsAny<TComponent>(this Component component, params string[] tags) where TComponent : Component Parameters Type Name Description Component component string[] tags Returns Type Description TComponent[] Type Parameters Name Description TComponent GetComponentsWithTagsAny<TComponent>(GameObject, params string[]) Retrieves all components of the specified type associated with any of the given tags from the specified GameObject. Declaration public static TComponent[] GetComponentsWithTagsAny<TComponent>(this GameObject gameObject, params string[] tags) where TComponent : Component Parameters Type Name Description GameObject gameObject string[] tags Returns Type Description TComponent[] Type Parameters Name Description TComponent GetTags(Component) Retrieves the tags associated with the specified UnityEngine.Component. Declaration public static string[] GetTags(this Component component) Parameters Type Name Description Component component The UnityEngine.Component for which to retrieve the associated tags. Returns Type Description string[] An array of strings containing the tags associated with the specified UnityEngine.Component. If no tags are associated, returns null"
  },
  "api/RocketshiftStudio.Tagment.TagmentSettings.html": {
    "href": "api/RocketshiftStudio.Tagment.TagmentSettings.html",
    "title": "Class TagmentSettings | Tagment - Component Tags Documentation",
    "summary": "Class TagmentSettings Inheritance object Object ScriptableObject ScriptableSingleton<TagmentSettings> TagmentSettings Inherited Members ScriptableSingleton<TagmentSettings>.Instance Namespace: RocketshiftStudio.Tagment Assembly: RocketshiftStudio.Tagment.dll Syntax [ScriptableSingleton(\"Rocketshift Studio/Utilities/Tagment\", null, false)] public sealed class TagmentSettings : ScriptableSingleton<TagmentSettings> Properties Tags Declaration public string[] Tags { get; } Property Value Type Description string[]"
  },
  "api/RocketshiftStudio.Tagment.html": {
    "href": "api/RocketshiftStudio.Tagment.html",
    "title": "Namespace RocketshiftStudio.Tagment | Tagment - Component Tags Documentation",
    "summary": "Namespace RocketshiftStudio.Tagment Classes Tagment TagmentSettings"
  },
  "api/RocketshiftStudio.Trophy.BestCalculationType.html": {
    "href": "api/RocketshiftStudio.Trophy.BestCalculationType.html",
    "title": "Enum BestCalculationType | Tagment - Component Tags Documentation",
    "summary": "Enum BestCalculationType Defines how best value will be calculated Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum BestCalculationType Fields Name Description Highest Consider the highest value then previous Lowest Consider the lowest value then previous"
  },
  "api/RocketshiftStudio.Trophy.Component.ScoreIcon.html": {
    "href": "api/RocketshiftStudio.Trophy.Component.ScoreIcon.html",
    "title": "Class ScoreIcon | Tagment - Component Tags Documentation",
    "summary": "Class ScoreIcon In order to show score icon in game world or UGUI Inheritance object Object Component Behaviour MonoBehaviour ScoreIcon Namespace: RocketshiftStudio.Trophy.Component Assembly: RocketshiftStudio.Trophy.dll Syntax [AddComponentMenu(\"Rocketshift Studio/Trophy/Score Icon\")] [ExecuteAlways] [DisallowMultipleComponent] public sealed class ScoreIcon : MonoBehaviour Properties Key Declaration public string Key { get; } Property Value Type Description string Observer Declaration public IIconObserver Observer { get; } Property Value Type Description IIconObserver"
  },
  "api/RocketshiftStudio.Trophy.Component.ScoreText.html": {
    "href": "api/RocketshiftStudio.Trophy.Component.ScoreText.html",
    "title": "Class ScoreText | Tagment - Component Tags Documentation",
    "summary": "Class ScoreText In order to show score in game world or UGUI Inheritance object Object Component Behaviour MonoBehaviour ScoreText Namespace: RocketshiftStudio.Trophy.Component Assembly: RocketshiftStudio.Trophy.dll Syntax [AddComponentMenu(\"Rocketshift Studio/Trophy/Score Text\")] [ExecuteAlways] [DisallowMultipleComponent] public sealed class ScoreText : MonoBehaviour Properties Format Declaration public string Format { get; } Property Value Type Description string Key Declaration public string Key { get; } Property Value Type Description string Observer Declaration public ITextObserver Observer { get; } Property Value Type Description ITextObserver Type Declaration public ScoreType Type { get; } Property Value Type Description ScoreType"
  },
  "api/RocketshiftStudio.Trophy.Component.html": {
    "href": "api/RocketshiftStudio.Trophy.Component.html",
    "title": "Namespace RocketshiftStudio.Trophy.Component | Tagment - Component Tags Documentation",
    "summary": "Namespace RocketshiftStudio.Trophy.Component Classes ScoreIcon In order to show score icon in game world or UGUI ScoreText In order to show score in game world or UGUI"
  },
  "api/RocketshiftStudio.Trophy.DefinitionBase.html": {
    "href": "api/RocketshiftStudio.Trophy.DefinitionBase.html",
    "title": "Class DefinitionBase | Tagment - Component Tags Documentation",
    "summary": "Class DefinitionBase Inheritance object Object ScriptableObject DefinitionBase LeaderboardDefinition ScoreDefinition Implements IDefinition Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class DefinitionBase : ScriptableObject, IDefinition Properties Key Identification key of the score Declaration public string Key { get; } Property Value Type Description string Implements IDefinition"
  },
  "api/RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.html",
    "title": "Class BaseCloudStorageExtension | Tagment - Component Tags Documentation",
    "summary": "Class BaseCloudStorageExtension To allow cloud storage based save/load operations on score values Inheritance object BaseCloudStorageExtension Implements ICloudStorageExtension IStorageExtension ISpecialPermissionExtension IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class BaseCloudStorageExtension : ICloudStorageExtension, IStorageExtension, ISpecialPermissionExtension, IExtension Methods DeleteAsync(IList<string>) To delete score values from storage Declaration public abstract Task DeleteAsync(IList<string> keys) Parameters Type Name Description IList<string> keys Target keys Returns Type Description Task Asynchronous operation IsAuthorized() Used by Trophy to check for database authorization Declaration public abstract bool IsAuthorized() Returns Type Description bool Authorization status LoadAsync(IList<string>) To load and sync score values with saved values Declaration public virtual Task<IList<ScoreData>> LoadAsync(IList<string> keys) Parameters Type Name Description IList<string> keys Target keys Returns Type Description Task<IList<ScoreData>> Score data collection LoadAsync(IList<string>, string) To fetch score values of a user with id Declaration public abstract Task<IList<ScoreData>> LoadAsync(IList<string> keys, string userId) Parameters Type Name Description IList<string> keys Target keys string userId Id of user Returns Type Description Task<IList<ScoreData>> Score data collection SaveAsync(IList<ScoreData>) To save score values to storage Declaration public abstract Task SaveAsync(IList<ScoreData> data) Parameters Type Name Description IList<ScoreData> data Returns Type Description Task Asynchronous operation Implements ICloudStorageExtension IStorageExtension ISpecialPermissionExtension IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.BaseLocalStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.BaseLocalStorageExtension.html",
    "title": "Class BaseLocalStorageExtension | Tagment - Component Tags Documentation",
    "summary": "Class BaseLocalStorageExtension Inheritance object BaseLocalStorageExtension Implements ILocalStorageExtension IStorageExtension IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class BaseLocalStorageExtension : ILocalStorageExtension, IStorageExtension, IExtension Properties FileExtension Declaration public string FileExtension { get; } Property Value Type Description string SaveDirectory Declaration public abstract string SaveDirectory { get; } Property Value Type Description string Methods DeleteAsync(IList<string>) To delete score values from storage Declaration public abstract Task DeleteAsync(IList<string> keys) Parameters Type Name Description IList<string> keys Target keys Returns Type Description Task Asynchronous operation LoadAsync(IList<string>) To load and sync score values with saved values Declaration public abstract Task<IList<ScoreData>> LoadAsync(IList<string> keys) Parameters Type Name Description IList<string> keys Target keys Returns Type Description Task<IList<ScoreData>> Score data collection SaveAsync(IList<ScoreData>) To save score values to storage Declaration public abstract Task SaveAsync(IList<ScoreData> data) Parameters Type Name Description IList<ScoreData> data Returns Type Description Task Asynchronous operation Implements ILocalStorageExtension IStorageExtension IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ComponentScoreIconExtension-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ComponentScoreIconExtension-1.html",
    "title": "Class ComponentScoreIconExtension<TComponent> | Tagment - Component Tags Documentation",
    "summary": "Class ComponentScoreIconExtension<TComponent> Icon display extension base for component type target Inheritance object ComponentScoreIconExtension<TComponent> Implements IScoreIconExtension IScoreDisplayExtension<Sprite> IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class ComponentScoreIconExtension<TComponent> : IScoreIconExtension, IScoreDisplayExtension<Sprite>, IExtension where TComponent : Component Type Parameters Name Description TComponent Target component type Properties Key Identification key of the score Declaration public string Key { get; } Property Value Type Description string Target Target component Declaration public TComponent Target { get; } Property Value Type Description TComponent Methods AssignValue(Sprite) Declaration protected abstract void AssignValue(Sprite value) Parameters Type Name Description Sprite value Updated(Sprite) Invoked on value update Declaration public void Updated(Sprite value) Parameters Type Name Description Sprite value New value Implements IScoreIconExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ComponentScoreTextExtension-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ComponentScoreTextExtension-1.html",
    "title": "Class ComponentScoreTextExtension<TComponent> | Tagment - Component Tags Documentation",
    "summary": "Class ComponentScoreTextExtension<TComponent> Text display extension base for component type target Inheritance object ComponentScoreTextExtension<TComponent> Implements IScoreTextExtension IScoreDisplayExtension<string> IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class ComponentScoreTextExtension<TComponent> : IScoreTextExtension, IScoreDisplayExtension<string>, IExtension where TComponent : Component Type Parameters Name Description TComponent Target component type Properties Format Override the format of ScoreDefinition's metadata's DefaultFormat Declaration public string Format { get; } Property Value Type Description string Key Identification key of the score Declaration public string Key { get; } Property Value Type Description string Target Target component Declaration protected TComponent Target { get; } Property Value Type Description TComponent Type Target score type Declaration public ScoreType Type { get; } Property Value Type Description ScoreType Methods AssignValue(string) Declaration protected abstract void AssignValue(string value) Parameters Type Name Description string value Updated(string) Invoked on value update Declaration public void Updated(string value) Parameters Type Name Description string value New value Implements IScoreTextExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html",
    "title": "Interface ICloudStorageExtension | Tagment - Component Tags Documentation",
    "summary": "Interface ICloudStorageExtension To allow cloud storage based save/load operations on score values Inherited Members IStorageExtension.LoadAsync(IList<string>) IStorageExtension.SaveAsync(IList<ScoreData>) IStorageExtension.DeleteAsync(IList<string>) ISpecialPermissionExtension.IsAuthorized() Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ICloudStorageExtension : IStorageExtension, ISpecialPermissionExtension, IExtension Methods LoadAsync(IList<string>, string) To fetch score values of a user with id Declaration Task<IList<ScoreData>> LoadAsync(IList<string> keys, string userId) Parameters Type Name Description IList<string> keys Target keys string userId Id of user Returns Type Description Task<IList<ScoreData>> Score data collection"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IExtension.html",
    "title": "Interface IExtension | Tagment - Component Tags Documentation",
    "summary": "Interface IExtension Used to create custom extensions Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IIconObserver.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IIconObserver.html",
    "title": "Interface IIconObserver | Tagment - Component Tags Documentation",
    "summary": "Interface IIconObserver Inherited Members IValueObserver<Sprite>.Changed(Sprite) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IIconObserver : IValueObserver<Sprite>, IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ILeaderboardExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ILeaderboardExtension.html",
    "title": "Interface ILeaderboardExtension | Tagment - Component Tags Documentation",
    "summary": "Interface ILeaderboardExtension Inherited Members ISpecialPermissionExtension.IsAuthorized() Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ILeaderboardExtension : ISpecialPermissionExtension, IExtension Methods PostAsync(LeaderboardData[]) Invoked on leaderboard post request call from PostToLeaderboardAsync(LeaderboardRequest[]) or PostToLeaderboard(LeaderboardRequest[]) Declaration Task PostAsync(LeaderboardData[] leaderboardData) Parameters Type Name Description LeaderboardData[] leaderboardData Returns Type Description Task Asynchronous operation"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ILocalFileStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ILocalFileStorageExtension.html",
    "title": "Interface ILocalFileStorageExtension | Tagment - Component Tags Documentation",
    "summary": "Interface ILocalFileStorageExtension To allow local storage based save/load operations on score values using files Inherited Members IStorageExtension.LoadAsync(IList<string>) IStorageExtension.SaveAsync(IList<ScoreData>) IStorageExtension.DeleteAsync(IList<string>) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ILocalFileStorageExtension : ILocalStorageExtension, IStorageExtension, IExtension Properties FileExtension Declaration string FileExtension { get; } Property Value Type Description string SaveDirectory Declaration string SaveDirectory { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ILocalStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ILocalStorageExtension.html",
    "title": "Interface ILocalStorageExtension | Tagment - Component Tags Documentation",
    "summary": "Interface ILocalStorageExtension To allow local storage based save/load operations on score values Inherited Members IStorageExtension.LoadAsync(IList<string>) IStorageExtension.SaveAsync(IList<ScoreData>) IStorageExtension.DeleteAsync(IList<string>) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ILocalStorageExtension : IStorageExtension, IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IScoreDisplayExtension-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IScoreDisplayExtension-1.html",
    "title": "Interface IScoreDisplayExtension<TValue> | Tagment - Component Tags Documentation",
    "summary": "Interface IScoreDisplayExtension<TValue> Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IScoreDisplayExtension<TValue> : IExtension where TValue : class Type Parameters Name Description TValue Properties Key Identification key of the score Declaration string Key { get; } Property Value Type Description string Methods Updated(TValue) Invoked on value update Declaration void Updated(TValue value) Parameters Type Name Description TValue value New value"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IScoreIconExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IScoreIconExtension.html",
    "title": "Interface IScoreIconExtension | Tagment - Component Tags Documentation",
    "summary": "Interface IScoreIconExtension Inherited Members IScoreDisplayExtension<Sprite>.Key IScoreDisplayExtension<Sprite>.Updated(Sprite) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IScoreIconExtension : IScoreDisplayExtension<Sprite>, IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IScoreTextExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IScoreTextExtension.html",
    "title": "Interface IScoreTextExtension | Tagment - Component Tags Documentation",
    "summary": "Interface IScoreTextExtension Inherited Members IScoreDisplayExtension<string>.Key IScoreDisplayExtension<string>.Updated(string) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IScoreTextExtension : IScoreDisplayExtension<string>, IExtension Properties Format Override the format of ScoreDefinition's metadata's DefaultFormat Declaration string Format { get; } Property Value Type Description string Type Target score type Declaration ScoreType Type { get; } Property Value Type Description ScoreType"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html",
    "title": "Interface ISpecialPermissionExtension | Tagment - Component Tags Documentation",
    "summary": "Interface ISpecialPermissionExtension To extensions to perform actions based on authorization Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ISpecialPermissionExtension : IExtension Methods IsAuthorized() Used by Trophy to check for database authorization Declaration bool IsAuthorized() Returns Type Description bool Authorization status"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IStorageExtension.html",
    "title": "Interface IStorageExtension | Tagment - Component Tags Documentation",
    "summary": "Interface IStorageExtension To allow storage based save/load operations on score values Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IStorageExtension : IExtension Methods DeleteAsync(IList<string>) To delete score values from storage Declaration Task DeleteAsync(IList<string> keys) Parameters Type Name Description IList<string> keys Target keys Returns Type Description Task Asynchronous operation LoadAsync(IList<string>) To load and sync score values with saved values Declaration Task<IList<ScoreData>> LoadAsync(IList<string> keys) Parameters Type Name Description IList<string> keys Target keys Returns Type Description Task<IList<ScoreData>> Score data collection SaveAsync(IList<ScoreData>) To save score values to storage Declaration Task SaveAsync(IList<ScoreData> scoreData) Parameters Type Name Description IList<ScoreData> scoreData Returns Type Description Task Asynchronous operation"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ITextObserver.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ITextObserver.html",
    "title": "Interface ITextObserver | Tagment - Component Tags Documentation",
    "summary": "Interface ITextObserver Inherited Members IValueObserver<string>.Changed(string) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ITextObserver : IValueObserver<string>, IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IValueObserver-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IValueObserver-1.html",
    "title": "Interface IValueObserver<TValue> | Tagment - Component Tags Documentation",
    "summary": "Interface IValueObserver<TValue> Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IValueObserver<TValue> : IExtension where TValue : class Type Parameters Name Description TValue Methods Changed(TValue) Invoked on value update Declaration void Changed(TValue value) Parameters Type Name Description TValue value New value"
  },
  "api/RocketshiftStudio.Trophy.Extensions.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.html",
    "title": "Namespace RocketshiftStudio.Trophy.Extensions | Tagment - Component Tags Documentation",
    "summary": "Namespace RocketshiftStudio.Trophy.Extensions Classes BaseCloudStorageExtension To allow cloud storage based save/load operations on score values Interfaces ICloudStorageExtension To allow cloud storage based save/load operations on score values IExtension Used to create custom extensions IIconObserver ILeaderboardExtension ILocalFileStorageExtension To allow local storage based save/load operations on score values using files ILocalStorageExtension To allow local storage based save/load operations on score values ISpecialPermissionExtension To extensions to perform actions based on authorization IStorageExtension To allow storage based save/load operations on score values ITextObserver IValueObserver<TValue>"
  },
  "api/RocketshiftStudio.Trophy.FlowRestriction.html": {
    "href": "api/RocketshiftStudio.Trophy.FlowRestriction.html",
    "title": "Enum FlowRestriction | Tagment - Component Tags Documentation",
    "summary": "Enum FlowRestriction Defines the restriction of value direction Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum FlowRestriction Fields Name Description Decremental Can only be decreased Incremental Can only be increased None Can be both increased and decreased"
  },
  "api/RocketshiftStudio.Trophy.FormatUtility.html": {
    "href": "api/RocketshiftStudio.Trophy.FormatUtility.html",
    "title": "Class FormatUtility | Tagment - Component Tags Documentation",
    "summary": "Class FormatUtility Used for text formation purposes Inheritance object FormatUtility Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public static class FormatUtility Methods FormatScore(string, bool, string, double, ScoreType) Score value to a text using format Declaration public static string FormatScore(string format, bool asTime, string name, double value = NaN, ScoreType type = ScoreType.Current) Parameters Type Name Description string format Format to use bool asTime Format to time string name Name of the score double value The value of given type ScoreType type The score type Returns Type Description string Formatted score text"
  },
  "api/RocketshiftStudio.Trophy.HashAlgorithm.html": {
    "href": "api/RocketshiftStudio.Trophy.HashAlgorithm.html",
    "title": "Enum HashAlgorithm | Tagment - Component Tags Documentation",
    "summary": "Enum HashAlgorithm Defines which hashing algorithm to use for hash validation Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum HashAlgorithm Fields Name Description MD5 Insecure, use only for basic validation SHA1 Insecure yet use only for normal validation SHA256 Strong and widely used SHA384 Strong and used for high-security. SHA512 Strongest among other options"
  },
  "api/RocketshiftStudio.Trophy.IDefinition.html": {
    "href": "api/RocketshiftStudio.Trophy.IDefinition.html",
    "title": "Interface IDefinition | Tagment - Component Tags Documentation",
    "summary": "Interface IDefinition Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IDefinition Properties Key Identification key of the score Declaration string Key { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.IMGUI.ScoreIcon.html": {
    "href": "api/RocketshiftStudio.Trophy.IMGUI.ScoreIcon.html",
    "title": "Class ScoreIcon | Tagment - Component Tags Documentation",
    "summary": "Class ScoreIcon In order to show score icon in IMGUI Inheritance object ScoreIcon Namespace: RocketshiftStudio.Trophy.IMGUI Assembly: RocketshiftStudio.Trophy.dll Syntax public sealed class ScoreIcon Examples using UnityEngine; using RocketshiftStudio.Trophy.IMGUI; public class ScoreIconIMGUIExample : MonoBehaviour { private const string KEY = \"KEY_HERE\"; private ScoreIcon scoreIcon; private void Start() { scoreIcon = new ScoreIcon(KEY); } private void OnGUI() { Rect rect = new Rect(0, 0, 500, 500); GUI.DrawTexture(rect, scoreIcon.Texture); } } Constructors ScoreIcon(string) Declaration public ScoreIcon(string key) Parameters Type Name Description string key Identification key of the score Fields key Identification key of the score Declaration public readonly string key Field Value Type Description string Properties Texture The icon texture assigned with the declared key Declaration public Texture2D Texture { get; } Property Value Type Description Texture2D"
  },
  "api/RocketshiftStudio.Trophy.IMGUI.ScoreText.html": {
    "href": "api/RocketshiftStudio.Trophy.IMGUI.ScoreText.html",
    "title": "Class ScoreText | Tagment - Component Tags Documentation",
    "summary": "Class ScoreText In order to show score text in IMGUI Inheritance object ScoreText Namespace: RocketshiftStudio.Trophy.IMGUI Assembly: RocketshiftStudio.Trophy.dll Syntax public sealed class ScoreText Examples using UnityEngine; using RocketshiftStudio.Trophy.IMGUI; public class ScoreTextIMGUIExample : MonoBehaviour { private const string KEY = \"KEY_HERE\"; private ScoreText scoreText; private void Start() { scoreText = new ScoreText(KEY); //or scoreText = new ScoreText(KEY, ScoreType.Current); //or scoreText = new ScoreText(KEY, ScoreType.Best, \"{0} {2}:{1:000}\"); } private void OnGUI() { GUILayout.Label(scoreText.text); } } Constructors ScoreText(string, ScoreType, string) Declaration public ScoreText(string key, ScoreType type = ScoreType.Current, string format = \"\") Parameters Type Name Description string key Identification key of the score ScoreType type Target score type string format Override the format of ScoreDefinition's metadata's DefaultFormat Fields key Identification key of the score Declaration public readonly string key Field Value Type Description string type Target score type Declaration public readonly ScoreType type Field Value Type Description ScoreType Properties Format Override the format of ScoreDefinition's metadata's DefaultFormat Declaration public string Format { get; set; } Property Value Type Description string text Formatted score text Declaration public string text { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.IMGUI.html": {
    "href": "api/RocketshiftStudio.Trophy.IMGUI.html",
    "title": "Namespace RocketshiftStudio.Trophy.IMGUI | Tagment - Component Tags Documentation",
    "summary": "Namespace RocketshiftStudio.Trophy.IMGUI Classes ScoreIcon In order to show score icon in IMGUI ScoreText In order to show score text in IMGUI"
  },
  "api/RocketshiftStudio.Trophy.LeaderboardData.html": {
    "href": "api/RocketshiftStudio.Trophy.LeaderboardData.html",
    "title": "Struct LeaderboardData | Tagment - Component Tags Documentation",
    "summary": "Struct LeaderboardData Define the data of leaderboard for leaderboard extensions to handle Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public readonly struct LeaderboardData Constructors LeaderboardData(string, string, double) Create instance without additional information for the leaderboard Declaration public LeaderboardData(string key, string scoreKey, double value) Parameters Type Name Description string key Identification key of the leaderboard string scoreKey Identification key of the target score double value Value to pass to leaderboard LeaderboardData(string, string, double, object) Create instance with additional information for the leaderboard Declaration public LeaderboardData(string key, string scoreKey, double value, object customMetadata) Parameters Type Name Description string key Identification key of the leaderboard string scoreKey Identification key of the target score double value Value to pass to leaderboard object customMetadata Additional information for the leaderboard Fields customMetadata Additional information for the leaderboard Declaration public readonly object customMetadata Field Value Type Description object key Identification key of the leaderboard Declaration public readonly string key Field Value Type Description string scoreKey Identification key of the target score Declaration public readonly string scoreKey Field Value Type Description string value Value to pass to leaderboard Declaration public readonly double value Field Value Type Description double"
  },
  "api/RocketshiftStudio.Trophy.LeaderboardDefinition.html": {
    "href": "api/RocketshiftStudio.Trophy.LeaderboardDefinition.html",
    "title": "Class LeaderboardDefinition | Tagment - Component Tags Documentation",
    "summary": "Class LeaderboardDefinition Inheritance object Object ScriptableObject DefinitionBase LeaderboardDefinition Implements IDefinition Inherited Members DefinitionBase.Key Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [CreateAssetMenu(menuName = \"Trophy/Leaderboard Definition\", fileName = \"New Leaderboard Definition\")] [ExcludeFromPreset] public sealed class LeaderboardDefinition : DefinitionBase, IDefinition Properties ScoreKey Declaration public string ScoreKey { get; } Property Value Type Description string ValueSource Declaration public LeaderboardValueSource ValueSource { get; } Property Value Type Description LeaderboardValueSource Implements IDefinition"
  },
  "api/RocketshiftStudio.Trophy.LeaderboardRequest.html": {
    "href": "api/RocketshiftStudio.Trophy.LeaderboardRequest.html",
    "title": "Struct LeaderboardRequest | Tagment - Component Tags Documentation",
    "summary": "Struct LeaderboardRequest Define the request data of leaderboard Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public readonly struct LeaderboardRequest Constructors LeaderboardRequest(string, object) Declaration public LeaderboardRequest(string key, object metadata = null) Parameters Type Name Description string key Identification key of the target score object metadata Additional information for leaderboard Fields key Identification key of the target score Declaration public readonly string key Field Value Type Description string metadata Additional information for leaderboard Declaration public readonly object metadata Field Value Type Description object"
  },
  "api/RocketshiftStudio.Trophy.LeaderboardValueSource.html": {
    "href": "api/RocketshiftStudio.Trophy.LeaderboardValueSource.html",
    "title": "Enum LeaderboardValueSource | Tagment - Component Tags Documentation",
    "summary": "Enum LeaderboardValueSource Defines the source of value for leaderboard post request Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum LeaderboardValueSource Fields Name Description Best Will use the best value when posting Latest Will use the latest value when posting Total Will use the total value when posting"
  },
  "api/RocketshiftStudio.Trophy.Limit.html": {
    "href": "api/RocketshiftStudio.Trophy.Limit.html",
    "title": "Class Limit | Tagment - Component Tags Documentation",
    "summary": "Class Limit Inheritance object Limit Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Serializable] public sealed class Limit Properties LimitFlags Define the limit of score values Declaration public LimitFlags LimitFlags { get; } Property Value Type Description LimitFlags Maximum The maximum value limit Declaration public double Maximum { get; } Property Value Type Description double Minimum The minimum value limit Declaration public double Minimum { get; } Property Value Type Description double"
  },
  "api/RocketshiftStudio.Trophy.LimitFlags.html": {
    "href": "api/RocketshiftStudio.Trophy.LimitFlags.html",
    "title": "Enum LimitFlags | Tagment - Component Tags Documentation",
    "summary": "Enum LimitFlags Define the limit of score values Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Flags] public enum LimitFlags Fields Name Description Both Define both minimum and maximum limit Maximum Define maximum limit Minimum Define minimum limit None No limit other then double.Min and double.Max"
  },
  "api/RocketshiftStudio.Trophy.Score.html": {
    "href": "api/RocketshiftStudio.Trophy.Score.html",
    "title": "Class Score | Tagment - Component Tags Documentation",
    "summary": "Class Score Inheritance object Score Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Serializable] public sealed class Score Fields definition Declaration public readonly ScoreDefinition definition Field Value Type Description ScoreDefinition Properties BestValue Best scored value Declaration public double BestValue { get; } Property Value Type Description double CurrentValue Concurrent scored value while counting is on Declaration public double CurrentValue { get; } Property Value Type Description double IsCounting Indicates whether the counting process is currently active or not. Declaration public bool IsCounting { get; } Property Value Type Description bool LatestValue Last scored value Declaration public double LatestValue { get; } Property Value Type Description double Multiplier Multiplies value before modifying concurrent score Declaration public float Multiplier { get; } Property Value Type Description float Status Indicates the current saved status of the values Declaration public ScoreStatusFlags Status { get; } Property Value Type Description ScoreStatusFlags TotalValue Total accumulated value Declaration public double TotalValue { get; } Property Value Type Description double"
  },
  "api/RocketshiftStudio.Trophy.ScoreData.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreData.html",
    "title": "Class ScoreData | Tagment - Component Tags Documentation",
    "summary": "Class ScoreData Inheritance object ScoreData Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Serializable] public sealed class ScoreData Constructors ScoreData(string, double, double, double, string) Declaration public ScoreData(string key, double best, double latest, double total, string hash = null) Parameters Type Name Description string key double best double latest double total string hash Properties Best Declaration public double Best { get; } Property Value Type Description double Hash Declaration public string Hash { get; } Property Value Type Description string Key Declaration public string Key { get; } Property Value Type Description string Latest Declaration public double Latest { get; } Property Value Type Description double Total Declaration public double Total { get; } Property Value Type Description double Methods IsValid() Declaration public bool IsValid() Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/RocketshiftStudio.Trophy.ScoreDefinition.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreDefinition.html",
    "title": "Class ScoreDefinition | Tagment - Component Tags Documentation",
    "summary": "Class ScoreDefinition Defines how a score will be managed Inheritance object Object ScriptableObject DefinitionBase ScoreDefinition Implements IDefinition Inherited Members DefinitionBase.Key Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [CreateAssetMenu(menuName = \"Trophy/Score Definition\", fileName = \"New Score Definition\")] [ExcludeFromPreset] public sealed class ScoreDefinition : DefinitionBase, IDefinition Properties AbsoluteValue Convert negative values to positive Declaration public bool AbsoluteValue { get; } Property Value Type Description bool BestCalculationType Defines how best value will be calculated Declaration public BestCalculationType BestCalculationType { get; } Property Value Type Description BestCalculationType CurrentFlowRestriction Flow restriction of current value Declaration public FlowRestriction CurrentFlowRestriction { get; } Property Value Type Description FlowRestriction CurrentLimit Limit of current value Declaration public Limit CurrentLimit { get; } Property Value Type Description Limit FlowRestriction Defines flow restriction of value Declaration public bool FlowRestriction { get; } Property Value Type Description bool LimitValues Limit values of score Declaration public bool LimitValues { get; } Property Value Type Description bool Metadata Additional information about score Declaration public ScoreMetadata Metadata { get; } Property Value Type Description ScoreMetadata StorageFlags Defines how the score values will be saved or loaded Declaration public StorageFlags StorageFlags { get; } Property Value Type Description StorageFlags TotalFlowRestriction Flow restriction of total value Declaration public FlowRestriction TotalFlowRestriction { get; } Property Value Type Description FlowRestriction TotalLimit Limit of total value Declaration public Limit TotalLimit { get; } Property Value Type Description Limit WholeValue Round value to nearest whole value Declaration public bool WholeValue { get; } Property Value Type Description bool Implements IDefinition"
  },
  "api/RocketshiftStudio.Trophy.ScoreMetadata.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreMetadata.html",
    "title": "Class ScoreMetadata | Tagment - Component Tags Documentation",
    "summary": "Class ScoreMetadata Additional information about score Inheritance object ScoreMetadata Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Serializable] public sealed class ScoreMetadata Properties DefaultFormat Declaration public string DefaultFormat { get; } Property Value Type Description string FormatAsTime Declaration public bool FormatAsTime { get; } Property Value Type Description bool Icon Declaration public Sprite Icon { get; } Property Value Type Description Sprite Name Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.ScoreStatusFlags.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreStatusFlags.html",
    "title": "Enum ScoreStatusFlags | Tagment - Component Tags Documentation",
    "summary": "Enum ScoreStatusFlags For status of the score Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Flags] public enum ScoreStatusFlags Fields Name Description Cloud Saved in cloud storage Leaderboard Posted to leaderboard Local Saved in local storage Unsaved Not saved or posted"
  },
  "api/RocketshiftStudio.Trophy.ScoreType.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreType.html",
    "title": "Enum ScoreType | Tagment - Component Tags Documentation",
    "summary": "Enum ScoreType Types of score Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum ScoreType Fields Name Description Best Highest saved value of score after score count ended Current The concurrent value of score when count mode is on Latest Latest saved value of score after score count ended Total Total saved sum of values of score after score count ended"
  },
  "api/RocketshiftStudio.Trophy.StorageFlags.html": {
    "href": "api/RocketshiftStudio.Trophy.StorageFlags.html",
    "title": "Enum StorageFlags | Tagment - Component Tags Documentation",
    "summary": "Enum StorageFlags Defines how the score values will be saved or loaded Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Flags] public enum StorageFlags Fields Name Description Both Saved/Loaded using both local and cloud storage Cloud Saved/Loaded using cloud storage Local Saved/Loaded using local storage None No save/load"
  },
  "api/RocketshiftStudio.Trophy.Trophy.CountingChangedCallback.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.CountingChangedCallback.html",
    "title": "Delegate Trophy.CountingChangedCallback | Tagment - Component Tags Documentation",
    "summary": "Delegate Trophy.CountingChangedCallback Invoked per count toggle change. Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public delegate void Trophy.CountingChangedCallback(string key, bool previous, bool current) Parameters Type Name Description string key The key of the effected score bool previous The count state before change bool current The count state after change"
  },
  "api/RocketshiftStudio.Trophy.Trophy.MultiplierChangedCallback.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.MultiplierChangedCallback.html",
    "title": "Delegate Trophy.MultiplierChangedCallback | Tagment - Component Tags Documentation",
    "summary": "Delegate Trophy.MultiplierChangedCallback Invoked per value change. Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public delegate void Trophy.MultiplierChangedCallback(string key, float previous, float current) Parameters Type Name Description string key The key of the effected score float previous The previous value float current The current value"
  },
  "api/RocketshiftStudio.Trophy.Trophy.StatusChangedCallback.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.StatusChangedCallback.html",
    "title": "Delegate Trophy.StatusChangedCallback | Tagment - Component Tags Documentation",
    "summary": "Delegate Trophy.StatusChangedCallback Invoked per status change. Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public delegate void Trophy.StatusChangedCallback(string key, ScoreStatusFlags status) Parameters Type Name Description string key The key of the effected score ScoreStatusFlags status The current status"
  },
  "api/RocketshiftStudio.Trophy.Trophy.ValueChangedCallback.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.ValueChangedCallback.html",
    "title": "Delegate Trophy.ValueChangedCallback | Tagment - Component Tags Documentation",
    "summary": "Delegate Trophy.ValueChangedCallback Invoked per value change. Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public delegate void Trophy.ValueChangedCallback(string key, double value, ScoreType type) Parameters Type Name Description string key The key of the effected score double value The current value ScoreType type The change value type"
  },
  "api/RocketshiftStudio.Trophy.Trophy.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.html",
    "title": "Class Trophy | Tagment - Component Tags Documentation",
    "summary": "Class Trophy Handle all score based operations from this class Inheritance object Object Component Behaviour MonoBehaviour SingletonMonoBehaviour<Trophy> Trophy Inherited Members SingletonMonoBehaviour<Trophy>.Instance Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [AddComponentMenu(\"\")] [ExcludeFromPreset] [ExcludeFromObjectFactory] public sealed class Trophy : SingletonMonoBehaviour<Trophy> Properties IsInitialized Indicates the state of Trophy Declaration public static bool IsInitialized { get; } Property Value Type Description bool Scores All active scores Declaration public ICollection<Score> Scores { get; } Property Value Type Description ICollection<Score> Methods BeginCounting(string) Set counting mode to true target score Declaration public void BeginCounting(string key) Parameters Type Name Description string key Target key Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given keys BeginCounting(string[]) Set counting mode to true target scores Declaration public void BeginCounting(string[] keys) Parameters Type Name Description string[] keys Target keys Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given keys DecreaseValue(string, double, bool) Decrease value of score Declaration public void DecreaseValue(string key, double amount, bool ignoreMultiplier = false) Parameters Type Name Description string key Target key double amount Amount to subtract bool ignoreMultiplier Ignore the score multiplier Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then or equal to 0 Delete(string) Delete values from storage according to storage flags defined in the ScoreDefinition Declaration public void Delete(string key) Parameters Type Name Description string key Target key Delete(string[]) Delete values from storage according to storage flags defined in the ScoreDefinition Declaration public void Delete(string[] keys) Parameters Type Name Description string[] keys Target keys DeleteAsync(string) Delete values from storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task DeleteAsync(string key) Parameters Type Name Description string key Target key Returns Type Description Task DeleteAsync(string[]) Delete values from storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task DeleteAsync(string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task EndCounting(string) Set count mode to false in target scores Declaration public void EndCounting(string key) Parameters Type Name Description string key Target key Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given keys EndCounting(string[]) Set count mode to false in target scores Declaration public void EndCounting(string[] keys) Parameters Type Name Description string[] keys Target keys Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given keys GetMultiplier(string) Get multiplier of a score Declaration public float GetMultiplier(string key) Parameters Type Name Description string key Target key Returns Type Description float Current multiplier value Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key GetStatus(string) Get status of a score Declaration public ScoreStatusFlags GetStatus(string key) Parameters Type Name Description string key Target key Returns Type Description ScoreStatusFlags The status of score Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key GetUserScoreAsync(string, string) Get score values from cloud storage asynchronously using user id Declaration public Task<ScoreData> GetUserScoreAsync(string userId, string key) Parameters Type Name Description string userId Id of user string key Target key Returns Type Description Task<ScoreData> Task with collection of ScoreData from given user id and keys GetUserScoresAsync(string, IList<string>) Get scores values from cloud storage asynchronously using user id Declaration public Task<IList<ScoreData>> GetUserScoresAsync(string userId, IList<string> keys) Parameters Type Name Description string userId Id of user IList<string> keys Target keys Returns Type Description Task<IList<ScoreData>> Task with collection of ScoreData from given user id and keys GetValue(string, ScoreType) Get value of score Declaration public double GetValue(string key, ScoreType type = ScoreType.Current) Parameters Type Name Description string key Target key ScoreType type Type of score Returns Type Description double Value from score of given key and given type Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key IncreaseValue(string, double, bool) Increase value of score Declaration public void IncreaseValue(string key, double amount, bool ignoreMultiplier = false) Parameters Type Name Description string key Target key double amount Amount to add bool ignoreMultiplier Ignore the score multiplier Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then or equal to 0 Initialize() Initialize Trophy Declaration public static void Initialize() InitializeAsync() Initialize Trophy asynchronously Declaration public static Task InitializeAsync() Returns Type Description Task IsCounting(string) To check if a score is in count mode Declaration public bool IsCounting(string key) Parameters Type Name Description string key Target key Returns Type Description bool Current count mode of score Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Load(ICollection<string>) Load values from storage according to storage flags defined in the ScoreDefinition Declaration public void Load(ICollection<string> keys) Parameters Type Name Description ICollection<string> keys Target keys Load(string) Load values from storage according to storage flags defined in the ScoreDefinition Declaration public void Load(string key) Parameters Type Name Description string key Target key LoadAsync(ICollection<string>) Load values from storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task LoadAsync(ICollection<string> keys) Parameters Type Name Description ICollection<string> keys Target keys Returns Type Description Task LoadAsync(string) Load values from storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task LoadAsync(string key) Parameters Type Name Description string key Returns Type Description Task MultiplyValue(string, double, bool) Multiply value of score Declaration public void MultiplyValue(string key, double amount, bool ignoreMultiplier) Parameters Type Name Description string key Target key double amount Amount to multiply with bool ignoreMultiplier Ignore the score multiplier Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then or equal to 0 PostToLeaderboard(LeaderboardRequest) Post values to leaderboard according to leaderboard definition with respective keys using extension defined in TrophySettings Declaration public void PostToLeaderboard(LeaderboardRequest request) Parameters Type Name Description LeaderboardRequest request PostToLeaderboard(LeaderboardRequest[]) Post values to leaderboard according to leaderboard definition with respective keys using extension defined in TrophySettings Declaration public void PostToLeaderboard(LeaderboardRequest[] requests) Parameters Type Name Description LeaderboardRequest[] requests Collection of LeaderboardRequest that will be used to post in leaderboard PostToLeaderboardAsync(LeaderboardRequest) Post values to leaderboard asynchronously according to leaderboard definition with respective keys using extension defined in TrophySettings Declaration public Task PostToLeaderboardAsync(LeaderboardRequest request) Parameters Type Name Description LeaderboardRequest request LeaderboardRequest that will be used to post in leaderboard Returns Type Description Task PostToLeaderboardAsync(LeaderboardRequest[]) Post values to leaderboard asynchronously according to leaderboard definition with respective keys using extension defined in TrophySettings Declaration public Task PostToLeaderboardAsync(LeaderboardRequest[] requests) Parameters Type Name Description LeaderboardRequest[] requests Collection of LeaderboardRequest that will be used to post in leaderboard Returns Type Description Task ResetValue(string) Reset value of score Declaration public void ResetValue(string key) Parameters Type Name Description string key Target key Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Save(IList<string>) Save current values in storage according to storage flags defined in the ScoreDefinition Declaration public void Save(IList<string> keys) Parameters Type Name Description IList<string> keys Target keys Save(string) Save current values in storage according to storage flags defined in the ScoreDefinition Declaration public void Save(string key) Parameters Type Name Description string key Target key SaveAsync(IList<string>) Save current values in storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task SaveAsync(IList<string> keys) Parameters Type Name Description IList<string> keys Target keys Returns Type Description Task SaveAsync(string) Save current values in storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task SaveAsync(string key) Parameters Type Name Description string key Target key Returns Type Description Task SetMultiplier(string, float) Set multiplier of a score Declaration public void SetMultiplier(string key, float amount) Parameters Type Name Description string key Target key float amount Multiplier amount Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then 0 and Not positive finite SetValue(string, double, bool) Set value of score Declaration public void SetValue(string key, double value, bool ignoreMultiplier = false) Parameters Type Name Description string key Target key double value New value bool ignoreMultiplier Ignore the score multiplier Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then or equal to 0 TryGetValue(string, out double, ScoreType) Try get value of score Declaration public bool TryGetValue(string key, out double value, ScoreType type = ScoreType.Current) Parameters Type Name Description string key Target key double value Value from score of given key and given type ScoreType type Type of score Returns Type Description bool True if score value found otherwise false Events CountingChanged Declaration public event Trophy.CountingChangedCallback CountingChanged Event Type Type Description Trophy.CountingChangedCallback Initialized Invoked as soon as Trophy initialized Declaration public static event Action Initialized Event Type Type Description Action MultiplierChanged Declaration public event Trophy.MultiplierChangedCallback MultiplierChanged Event Type Type Description Trophy.MultiplierChangedCallback StatusChanged Declaration public event Trophy.StatusChangedCallback StatusChanged Event Type Type Description Trophy.StatusChangedCallback ValueChanged Declaration public event Trophy.ValueChangedCallback ValueChanged Event Type Type Description Trophy.ValueChangedCallback"
  },
  "api/RocketshiftStudio.Trophy.TrophySettings.html": {
    "href": "api/RocketshiftStudio.Trophy.TrophySettings.html",
    "title": "Class TrophySettings | Tagment - Component Tags Documentation",
    "summary": "Class TrophySettings Inheritance object Object ScriptableObject ScriptableSingleton<TrophySettings> TrophySettings Inherited Members ScriptableSingleton<TrophySettings>.Instance Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [ScriptableSingleton(\"Rocketshift Studio/Systems/Trophy\", null, false)] public sealed class TrophySettings : ScriptableSingleton<TrophySettings> Properties AutoLoadSavedAtInit To enable/disable automatic load of values from storage at initialization Declaration public bool AutoLoadSavedAtInit { get; } Property Value Type Description bool CloudSaveExtension Extension for handing cloud storage operations Declaration public ICloudStorageExtension CloudSaveExtension { get; } Property Value Type Description ICloudStorageExtension EnableRuntimeTrophyExplorer Enable/Disable trophy explorer to show/hide on Ctrl/Command + F3 click on development build Declaration public bool EnableRuntimeTrophyExplorer { get; } Property Value Type Description bool HashAlgorithm Defines which hashing algorithm will be used to generate hash Declaration public HashAlgorithm HashAlgorithm { get; } Property Value Type Description HashAlgorithm HashSalt Random salt value for more secure hash Declaration public string HashSalt { get; } Property Value Type Description string HashValidationFlags Defines which storage will implement hash validation Declaration public StorageFlags HashValidationFlags { get; } Property Value Type Description StorageFlags LeaderboardDefinitions LeaderboardDefinition that will be active in the game Declaration public LeaderboardDefinition[] LeaderboardDefinitions { get; } Property Value Type Description LeaderboardDefinition[] LeaderboardExtension Extension for handing leaderboard operations Declaration public ILeaderboardExtension LeaderboardExtension { get; } Property Value Type Description ILeaderboardExtension LocalStorageExtension Extension for handing local storage operations Declaration public ILocalStorageExtension LocalStorageExtension { get; } Property Value Type Description ILocalStorageExtension ScoreDefinitions ScoreDefinition that will be active in the game Declaration public ScoreDefinition[] ScoreDefinitions { get; } Property Value Type Description ScoreDefinition[] Methods Contains(string) Check if a score definition exists with its key Declaration public bool Contains(string key) Parameters Type Name Description string key Identification key of the score Returns Type Description bool True if exists false otherwise GetMetadata(string) Get metadata of a score with its key Declaration public ScoreMetadata GetMetadata(string key) Parameters Type Name Description string key Identification key of the score Returns Type Description ScoreMetadata The metadata of the score Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given keys TryGetMetadata(string, out ScoreMetadata) Get metadata of a score with its key without getting exceptions Declaration public bool TryGetMetadata(string key, out ScoreMetadata metadata) Parameters Type Name Description string key Identification key of the score ScoreMetadata metadata The metadata of the score Returns Type Description bool True if metadata found false otherwise"
  },
  "api/RocketshiftStudio.Trophy.UIElements.ScoreIcon.html": {
    "href": "api/RocketshiftStudio.Trophy.UIElements.ScoreIcon.html",
    "title": "Class ScoreIcon | Tagment - Component Tags Documentation",
    "summary": "Class ScoreIcon In order to show score icon UIElements Inheritance object CallbackEventHandler Focusable VisualElement ScoreIcon Namespace: RocketshiftStudio.Trophy.UIElements Assembly: RocketshiftStudio.Trophy.dll Syntax public sealed class ScoreIcon : VisualElement Examples using UnityEngine; using RocketshiftStudio.Trophy.UIElements; public class ScoreIconUIElementsExample : MonoBehaviour { private UIDocument doc; private const string KEY = \"KEY_HERE\"; private ScoreIcon scoreIcon; private void Start() { doc = GetComponent<UIDocument>(); scoreIcon = new ScoreIcon(KEY); doc.rootVisualElement.Add(scoreIcon); } } Constructors ScoreIcon() Declaration public ScoreIcon() ScoreIcon(string) Declaration public ScoreIcon(string key) Parameters Type Name Description string key Identification key of the score Properties Key Identification key of the score Declaration public string Key { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.UIElements.ScoreText.html": {
    "href": "api/RocketshiftStudio.Trophy.UIElements.ScoreText.html",
    "title": "Class ScoreText | Tagment - Component Tags Documentation",
    "summary": "Class ScoreText In order to show score text in UIElements Inheritance object CallbackEventHandler Focusable VisualElement BindableElement TextElement Label ScoreText Namespace: RocketshiftStudio.Trophy.UIElements Assembly: RocketshiftStudio.Trophy.dll Syntax public sealed class ScoreText : Label Examples using UnityEngine; using RocketshiftStudio.Trophy.UIElements; public class ScoreTextUIElementsExample : MonoBehaviour { private UIDocument doc; private const string KEY = \"KEY_HERE\"; private ScoreText scoreText; private void Start() { doc = GetComponent<UIDocument>(); scoreText = new ScoreText(KEY); //or scoreText = new ScoreText(KEY, ScoreType.Current); //or scoreText = new ScoreText(KEY, ScoreType.Best, \"{0} {2}:{1:000}\"); doc.rootVisualElement.Add(scoreText); } } Constructors ScoreText() Declaration public ScoreText() ScoreText(string, ScoreType, string) Declaration public ScoreText(string key, ScoreType type = ScoreType.Current, string format = \"\") Parameters Type Name Description string key Identification key of the score ScoreType type Target score type string format Override the format of ScoreDefinition's metadata's DefaultFormat Properties Format Declaration public string Format { get; set; } Property Value Type Description string Key Identification key of the score Declaration public string Key { get; set; } Property Value Type Description string Type Declaration public ScoreType Type { get; set; } Property Value Type Description ScoreType"
  },
  "api/RocketshiftStudio.Trophy.UIElements.html": {
    "href": "api/RocketshiftStudio.Trophy.UIElements.html",
    "title": "Namespace RocketshiftStudio.Trophy.UIElements | Tagment - Component Tags Documentation",
    "summary": "Namespace RocketshiftStudio.Trophy.UIElements Classes ScoreIcon In order to show score icon UIElements ScoreText In order to show score text in UIElements"
  },
  "api/RocketshiftStudio.Trophy.html": {
    "href": "api/RocketshiftStudio.Trophy.html",
    "title": "Namespace RocketshiftStudio.Trophy | Tagment - Component Tags Documentation",
    "summary": "Namespace RocketshiftStudio.Trophy Classes DefinitionBase FormatUtility Used for text formation purposes LeaderboardDefinition Limit Score ScoreData ScoreDefinition Defines how a score will be managed ScoreMetadata Additional information about score Trophy Handle all score based operations from this class TrophySettings Structs LeaderboardData Define the data of leaderboard for leaderboard extensions to handle LeaderboardRequest Define the request data of leaderboard Interfaces IDefinition Enums BestCalculationType Defines how best value will be calculated FlowRestriction Defines the restriction of value direction HashAlgorithm Defines which hashing algorithm to use for hash validation LeaderboardValueSource Defines the source of value for leaderboard post request LimitFlags Define the limit of score values ScoreStatusFlags For status of the score ScoreType Types of score StorageFlags Defines how the score values will be saved or loaded Delegates Trophy.CountingChangedCallback Invoked per count toggle change. Trophy.MultiplierChangedCallback Invoked per value change. Trophy.StatusChangedCallback Invoked per status change. Trophy.ValueChangedCallback Invoked per value change."
  },
  "changelogs/change-logs.html": {
    "href": "changelogs/change-logs.html",
    "title": "Changelogs | Tagment - Component Tags Documentation",
    "summary": "Changelogs [1.0.1] Added demos Fixed format in score visual not working Fixed score icon observer not loading Added auto detect available definitions to prevent mistakes. Activating definition will included them in game and deactivating will them will make sure not to provide them in game Added webgl check for firebase realtime database extension as its not supported in Webgl when used via the official Unity SDK Added total score value with limits and flow restriction settings Updated trophy explorer to have overview per score rather then showing all values directly in the columns Added callback when multiplier changes [1.0.0] First release"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Tagment - Component Tags Documentation | Tagment - Component Tags Documentation",
    "summary": "Welcome to Tagment - Component Tags Documentation Tagment is the ultimate solution for adding one or more tags to induvidual components of game object in Unity, enabling more controll over components."
  },
  "manual/displaying.html": {
    "href": "manual/displaying.html",
    "title": "Displaying | Tagment - Component Tags Documentation",
    "summary": "Displaying Using this guide you'll learn how to display score text or icon to user UI This section is dedicated to guide you on showing score on unity's different ui systems UGUI Here are the steps to setup a score definiiton:** In project window, choose Create > Trophy > Score Definition In the Score Definition inspector define a unique key Go to trophy settings using Tools > Rocketshift Studio > Trophy > Settings In the settings editor's score definitions array add a entry and assign the definition in there. Metadata & Format Properties When it comes to showing scores to the user it requires some additional properties to do that. Here are information about the properties Property Description Name The display name of the score which can be shown along with the score value when using {0} in format Icon A sprite which can be shown along with using the appropriate score icon element based on the use case Default Format The string format for the score text to use when displaying it to the user. {0} Represents the name of the score {1} Represents the value of the score {2} Represents the type of the score e.g. {2} {0}: {0:F2} Result: Type Name: 0.00 Format \"As Time\" Tells the definition to handle format string as time format such as {1:mm.ss} for 140 seconds will be shown as 02:20 For more information about time format please refer to Microsoft Documentation Modifier Properties Modifiers processes value before applying to the score. Here are information about the properties Property Description Limits Flags Defines how the limit should effect the score value Flow Restriction Defines which direction has to be restricted Whole Value On checked will round floating point values to nearest integer Absolute Value On checked will convert negetive values to positive Save/Load Properties Defines score's saving and loading preferences Property Description Best Calculation Type How the best value will be calculated Storage Flags Which storage will be used for save & load of values Leaderboard Definitions Setup In order to post scores to leaderboard what you need is called Leaderboard definiiton. Here are the steps to setup a leaderboard definiiton: In project window, choose Create > Trophy > Leaderoard Definition In the Leaderoard Definition inspector set your leaderboard id. It should be same as the id you have setup in your server Server View Inspector View In definition's score key property use the key of the target score Select the source of value from value source Go to trophy settings using Tools > Rocketshift Studio > Trophy > Settings In the settings editor's leaderboards definitions array add a entry and assign the definition in there."
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Score Definitions | Tagment - Component Tags Documentation",
    "summary": "Score Definitions Setup In order to have score in the game what you need is called Score definiiton. Here are the steps to setup a score definiiton: In project window, choose Create > Trophy > Score Definition In the Score Definition inspector define a unique key If you want to have this definition in the build click activate Metadata & Format Properties When it comes to showing scores to the user it requires some additional properties to do that. Here are information about the properties Property Description Name The display name of the score which can be shown along with the score value when using {0} in format Icon A sprite which can be shown along with using the appropriate score icon element based on the use case Default Format The string format for the score text to use when displaying it to the user. {0} Represents the name of the score {1} Represents the value of the score {2} Represents the type of the score e.g. {2} {0}: {0:F2} Result: Type Name: 0.00 Format \"As Time\" Tells the definition to handle format string as time format such as {1:mm.ss} for 140 seconds will be shown as 02:20 For more information about time format please refer to Microsoft Documentation Modifier Properties Modifiers processes value before applying to the score. Here are information about the properties Property Description Limits Flags Defines how the limit should effect the score value Flow Restriction Defines which direction has to be restricted Whole Value On checked will round floating point values to nearest integer Absolute Value On checked will convert negetive values to positive Save/Load Properties Defines score's saving and loading preferences Property Description Best Calculation Type How the best value will be calculated Storage Flags Which storage will be used for save & load of values Leaderboard Definitions Setup In order to post scores to leaderboard what you need is called Leaderboard definiiton. Here are the steps to setup a leaderboard definiiton: In project window, choose Create > Trophy > Leaderoard Definition In the Leaderoard Definition inspector set your leaderboard id. It should be same as the id you have setup in your server Server View Inspector View If you want to have this definition in the build click activate In definition's score key property use the key of the target score Select the source of value from value source"
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Introduction | Tagment - Component Tags Documentation",
    "summary": "Introduction Trophy is a lightweight and powerful score system made for Unity. So that you can stop wasting time on creating score systems from scratch and implement full fledge score system within minutes. Why use Trophy? Because it provides almost all you need. Features: Lightweight & Powerful Dynamic & Extendible Optimized Scripts Clean Source Code Value Processing Scriptable Object Based Cloud/Local Storage Support Optional Integrity Validation for Save/Load using hash algorithms such as (MD5, SHA1, SHA256, SHA384, SHA512) Leaderboard Support Score Text & Icon Support (IMGUI, UGUI, UIElements, 2D/3D) Events Support Smooth Friendly Workflow Custom Editors Score Explorer for both Editor & Runtime (Development Build Only) Note Information the user should notice even if skimming."
  },
  "manual/upgrade-guide.html": {
    "href": "manual/upgrade-guide.html",
    "title": "Upgrade Guide | Tagment - Component Tags Documentation",
    "summary": "Upgrade Guide Follow these simple steps to upgrade to the latest version Copy Hash Salt if hashing enabled Go to Trophy Settings and copy the hash salt Remove Old Folders: Delete the folder Assets/Rocketshift Studio/Systems/Trophy Delete the folder Assets/Editor Default Resources/Rocketshift Studio/Systems/Trophy Import Latest Version: Download and import the latest version from the asset store. Paste the salt back to the settings if hashing enabled Go to Trophy Settings and paste the hash salt That's it! Your package should now be upgraded to the latest version."
  }
}